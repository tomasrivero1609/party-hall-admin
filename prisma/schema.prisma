generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Seller {
  id      Int      @id @default(autoincrement())
  name    String   @unique // Nombre del vendedor (único)
  events  Event[]  // Relación: Un vendedor puede tener muchos eventos
}

model Event {
  id                  Int         @id @default(autoincrement())
  name                String
  date                DateTime
  guests              Int
  pricePerPlate       Float
  total               Float
  remainingBalance    Float
  remainingPlates     Int
  eventType           EventType   @relation(fields: [eventTypeId], references: [id])
  eventTypeId         Int
  seller              Seller?     @relation(fields: [sellerId], references: [id]) // Relación opcional
  sellerId            Int?        // Hacer el campo opcional temporalmente
  payments            Payment[]
  lastPaymentDate     DateTime?  // Fecha del último pago (opcional)
  menu                String?     // Menú - Opcional
  observations        String?     // Observaciones - Opcional
  fileUrls            String[]    // Array de URLs de archivos (opcional)
  startTime           DateTime?   // Hora de inicio - Opcional
  endTime             DateTime?   // Hora de finalización - Opcional
  phone               String?     // Teléfono - Opcional
  email               String?     // Mail - Opcional
  address             String?     // Dirección - Opcional
  familyNames         String?     // Nombre de familiares - Opcional
}

model Payment {
  id                      Int      @id @default(autoincrement())
  amount                  Float
  payerName               String
  date                    String
  eventId                 Int
  event                   Event    @relation(fields: [eventId], references: [id])
  pricePerPlateAtPayment  Float?   // 🆕 Nuevo campo opcional para auditoría
}

model EventType {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  color     String
  events    Event[]
}